package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.Date;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  public MainController(UserRepository userRepository2) {
    //TODO Auto-generated constructor stub
  }

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam String UserID
      , @RequestParam String Password, @RequestParam float A, @RequestParam float K, @RequestParam float V) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    User n = new User();
    n.setDateTime(new Date());
    n.setUserID(UserID);
    n.setPassword(Password);
    n.setA(A);
    n.setK(K);
    n.setV(V);
    userRepository.save(n);
    return "Saved";
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }

  @DeleteMapping(path="/delete") // Map ONLY DELETE Requests
  public @ResponseBody String deleteUser (@RequestParam Integer id) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the DELETE request

    // Null-safety check
    if (id == null) {
      return "No ID provided";
    }

    // Check if user exists before deleting
    if (userRepository.findById(id).isPresent()) {
      userRepository.deleteById(id);
      return "Deleted";
    } else {
      return "User with id " + id + " does not exist";
    }
  }
}